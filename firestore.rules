/**
 * @fileOverview Firestore Security Rules for StoreFlow Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that only authenticated users can access their own data. This is achieved through path-based authorization, where all data is nested under `/users/{userId}`.
 *
 * Data Structure:
 * All data (user profiles, products, and sales) is nested under the `/users/{userId}` path. This structure enforces data privacy and simplifies security rules, as access control can be determined directly from the path.
 *
 * Key Security Decisions:
 * - User listing is implicitly denied.
 * - All write operations are protected by authorization checks based on the authenticated user's UID.
 * - The rules are designed to prevent unauthorized data access and modification.
 *
 * Denormalization for Authorization:
 * The data structure is designed to be authorization independent. The `userId` is embedded in the path itself, avoiding the need for costly `get()` calls to verify ownership.
 *
 * Structural Segregation:
 * Each collection under `/users/{userId}` (products, sales) contains only documents with the same access control requirements. This simplifies security rule definitions, as all documents within a collection have a uniform access posture.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rule for user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) Authenticated user creates their own profile with matching UID.
     * @allow (get, update, delete) Authenticated user reads/updates/deletes their own profile with matching UID.
     * @deny (create) Unauthenticated user attempts to create a profile.
     * @deny (get, update, delete) Authenticated user attempts to access/modify another user's profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for products owned by a specific user. Only the authenticated user can manage their own products.
     * @path /users/{userId}/products/{productId}
     * @allow (create) Authenticated user creates a product under their UID.
     * @allow (get, list, update, delete) Authenticated user manages their own products under their UID.
     * @deny (create) Unauthenticated user attempts to create a product.
     * @deny (get, list, update, delete) Authenticated user attempts to access/modify another user's product.
     * @principle Enforces document ownership for all operations on products.
     */
    match /users/{userId}/products/{productId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for sales transactions associated with a specific user. Only the authenticated user can manage their own sales records.
     * @path /users/{userId}/sales/{saleId}
     * @allow (create) Authenticated user creates a sale record under their UID.
     * @allow (get, list, update, delete) Authenticated user manages their own sales records under their UID.
     * @deny (create) Unauthenticated user attempts to create a sale.
     * @deny (get, list, update, delete) Authenticated user attempts to access/modify another user's sale record.
     * @principle Enforces document ownership for all operations on sales records.
     */
    match /users/{userId}/sales/{saleId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}